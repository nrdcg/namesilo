// Code generated by gen/gen_test.go DO NOT EDIT.

package namesilo

import (
	"context"
	"encoding/xml"
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func setupFakeAPI(t *testing.T, dir, operation string) *Client {
	t.Helper()

	mux := http.NewServeMux()
	server := httptest.NewServer(mux)
	t.Cleanup(server.Close)

	mux.HandleFunc("/"+operation, func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query()

		key := query.Get("key")
		if key != "1234" {
			err := xml.NewEncoder(w).Encode(Operation{Reply: Reply{Code: "110", Detail: "Invalid API Key"}})
			if err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
		}

		f, err := os.Open(filepath.Clean(filepath.Join(".", "samples", dir, operation+".xml")))
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		_, err = io.Copy(w, f)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
	})

	client := NewClient("1234")
	client.Endpoint, _ = url.Parse(server.URL)

	return client
}
{{range $key, $value := .Names }}
func TestClient_{{ $value.Upper }}(t *testing.T) {
	client := setupFakeAPI(t, "{{ $value.Dir }}", "{{ $value.Lower }}")

	params := &{{ $value.Upper }}Params{}

	result, err := client.{{ $value.Upper }}(context.TODO(), params)
	require.NoError(t, err)

	require.NotNil(t, result)

	assert.IsType(t, &{{ $value.Upper }}{}, result)
}
{{end}}
